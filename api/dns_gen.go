package api

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *DNSQuestion) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Host":
			z.Host, err = dc.ReadBytes(z.Host)
			if err != nil {
				err = msgp.WrapError(err, "Host")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *DNSQuestion) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Name"
	err = en.Append(0x82, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "Host"
	err = en.Append(0xa4, 0x48, 0x6f, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Host)
	if err != nil {
		err = msgp.WrapError(err, "Host")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *DNSQuestion) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Name"
	o = append(o, 0x82, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "Host"
	o = append(o, 0xa4, 0x48, 0x6f, 0x73, 0x74)
	o = msgp.AppendBytes(o, z.Host)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DNSQuestion) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Host":
			z.Host, bts, err = msgp.ReadBytesBytes(bts, z.Host)
			if err != nil {
				err = msgp.WrapError(err, "Host")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *DNSQuestion) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 5 + msgp.BytesPrefixSize + len(z.Host)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *DNSResourceRecord) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "CNAME":
			z.CNAME, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "CNAME")
				return
			}
		case "IP":
			z.IP, err = dc.ReadBytes(z.IP)
			if err != nil {
				err = msgp.WrapError(err, "IP")
				return
			}
		case "TTL":
			z.TTL, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "TTL")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *DNSResourceRecord) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "Name"
	err = en.Append(0x84, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "CNAME"
	err = en.Append(0xa5, 0x43, 0x4e, 0x41, 0x4d, 0x45)
	if err != nil {
		return
	}
	err = en.WriteString(z.CNAME)
	if err != nil {
		err = msgp.WrapError(err, "CNAME")
		return
	}
	// write "IP"
	err = en.Append(0xa2, 0x49, 0x50)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.IP)
	if err != nil {
		err = msgp.WrapError(err, "IP")
		return
	}
	// write "TTL"
	err = en.Append(0xa3, 0x54, 0x54, 0x4c)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.TTL)
	if err != nil {
		err = msgp.WrapError(err, "TTL")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *DNSResourceRecord) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Name"
	o = append(o, 0x84, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "CNAME"
	o = append(o, 0xa5, 0x43, 0x4e, 0x41, 0x4d, 0x45)
	o = msgp.AppendString(o, z.CNAME)
	// string "IP"
	o = append(o, 0xa2, 0x49, 0x50)
	o = msgp.AppendBytes(o, z.IP)
	// string "TTL"
	o = append(o, 0xa3, 0x54, 0x54, 0x4c)
	o = msgp.AppendUint32(o, z.TTL)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DNSResourceRecord) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "CNAME":
			z.CNAME, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CNAME")
				return
			}
		case "IP":
			z.IP, bts, err = msgp.ReadBytesBytes(bts, z.IP)
			if err != nil {
				err = msgp.WrapError(err, "IP")
				return
			}
		case "TTL":
			z.TTL, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TTL")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *DNSResourceRecord) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 6 + msgp.StringPrefixSize + len(z.CNAME) + 3 + msgp.BytesPrefixSize + len(z.IP) + 4 + msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *DNSResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Question":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Question")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Question")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Name":
					z.Question.Name, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Question", "Name")
						return
					}
				case "Host":
					z.Question.Host, err = dc.ReadBytes(z.Question.Host)
					if err != nil {
						err = msgp.WrapError(err, "Question", "Host")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Question")
						return
					}
				}
			}
		case "Answers":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Answers")
				return
			}
			if cap(z.Answers) >= int(zb0003) {
				z.Answers = (z.Answers)[:zb0003]
			} else {
				z.Answers = make([]DNSResourceRecord, zb0003)
			}
			for za0001 := range z.Answers {
				err = z.Answers[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Answers", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *DNSResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Question"
	// map header, size 2
	// write "Name"
	err = en.Append(0x82, 0xa8, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Question.Name)
	if err != nil {
		err = msgp.WrapError(err, "Question", "Name")
		return
	}
	// write "Host"
	err = en.Append(0xa4, 0x48, 0x6f, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Question.Host)
	if err != nil {
		err = msgp.WrapError(err, "Question", "Host")
		return
	}
	// write "Answers"
	err = en.Append(0xa7, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Answers)))
	if err != nil {
		err = msgp.WrapError(err, "Answers")
		return
	}
	for za0001 := range z.Answers {
		err = z.Answers[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Answers", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *DNSResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Question"
	// map header, size 2
	// string "Name"
	o = append(o, 0x82, 0xa8, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Question.Name)
	// string "Host"
	o = append(o, 0xa4, 0x48, 0x6f, 0x73, 0x74)
	o = msgp.AppendBytes(o, z.Question.Host)
	// string "Answers"
	o = append(o, 0xa7, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Answers)))
	for za0001 := range z.Answers {
		o, err = z.Answers[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Answers", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DNSResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Question":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Question")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Question")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Name":
					z.Question.Name, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Question", "Name")
						return
					}
				case "Host":
					z.Question.Host, bts, err = msgp.ReadBytesBytes(bts, z.Question.Host)
					if err != nil {
						err = msgp.WrapError(err, "Question", "Host")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Question")
						return
					}
				}
			}
		case "Answers":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Answers")
				return
			}
			if cap(z.Answers) >= int(zb0003) {
				z.Answers = (z.Answers)[:zb0003]
			} else {
				z.Answers = make([]DNSResourceRecord, zb0003)
			}
			for za0001 := range z.Answers {
				bts, err = z.Answers[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Answers", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *DNSResponse) Msgsize() (s int) {
	s = 1 + 9 + 1 + 5 + msgp.StringPrefixSize + len(z.Question.Name) + 5 + msgp.BytesPrefixSize + len(z.Question.Host) + 8 + msgp.ArrayHeaderSize
	for za0001 := range z.Answers {
		s += z.Answers[za0001].Msgsize()
	}
	return
}
